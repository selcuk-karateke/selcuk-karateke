// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Portfolio Models
model Project {
  id          String   @id @default(cuid())
  title       String   @unique
  description String
  image       String?
  technologies String
  githubUrl   String?
  liveUrl     String?
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Skill {
  id        String   @id @default(cuid())
  name      String   @unique
  category  String
  level     Int      @default(1) // 1-5 scale
  icon      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Experience {
  id          String   @id @default(cuid())
  company     String
  position    String
  description String
  startDate   DateTime
  endDate     DateTime?
  current     Boolean  @default(false)
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([company, position])
}

model Education {
  id          String   @id @default(cuid())
  institution String
  degree      String
  field       String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean  @default(false)
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Certification {
  id          String   @id @default(cuid())
  name        String
  issuer      String
  issueDate   DateTime
  expiryDate  DateTime?
  credentialId String?
  credentialUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, issuer], name: "name_issuer")
}

// Blog Models
model Post {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  content   String
  excerpt   String?
  published Boolean  @default(false)
  featured  Boolean  @default(false)
  tags      String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  comments  Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  author    String
  email     String
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Contact Form
model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Web3 Models
model Wallet {
  id        String   @id @default(cuid())
  address   String   @unique
  network   String
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
